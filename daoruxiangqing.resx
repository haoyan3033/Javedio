<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AABmZmYAZmZmAGZmZQBmZmUAZmZlAGZmZQBmZmUAZmZlAGZmZQBmZmUAZmZlAGZmZQBmZmUAZmZlAGZm
        ZQBmZmUAZmZlAGZmZQBmZmUAZmZlAGZmZQBmZmUAZmZlAGZmZQBmZmUAZmZlAGZmZQBmZmUAZmZlAGZm
        ZQBmZmYAZmZmAGZmZhxmZmYgZmZlKGZmZS1mZmUtZmZlLGZmZSxmZmUsZmZlLGZmZSxmZmUsZmZlLGZm
        ZSxmZmUsZmZlLGZmZSxmZmUsZmZlLGZmZSxmZmUsZmZlLGZmZSxmZmUsZmZlLGZmZSxmZmUsZmZlLGZm
        ZS1mZmUtZmZlKGZmZiBmZmYcZmZmW2ZmZmhmZmWCZmZlj2ZmZY9mZmWOZmZljmZmZY5mZmWOZmZljmZm
        ZY5mZmWOZmZljmZmZY5mZmWOZmZljmZmZY5mZmWOZmZljmZmZY5mZmWOZmZljmZmZY5mZmWOZmZljmZm
        ZY5mZmWOZmZlj2ZmZY9mZmWCZmZmaGZmZltmZmagZmZmrWZmZcdmZmXVZmZl1GZmZdRmZmXUZmZl1GZm
        ZdRmZmXUZmZl1GZmZdRmZmXUZmZl1GZmZdRmZmXUZmZl1GZmZdRmZmXUZmZl1GZmZdRmZmXUZmZl1GZm
        ZdRmZmXUZmZl1GZmZdRmZmXUZmZl1WZmZcdmZmatZmZmoGdnZuJnZ2bmZ2dm7mdnZvNnZ2bzZ2dm82dn
        ZvNnZ2bzZ2dm82dnZvNnZ2bzZ2dm82dnZvNnZ2bzZ2dm82dnZvNnZ2bzZ2dm82dnZvNnZ2bzZ2dm82dn
        ZvNnZ2bzZ2dm82dnZvNnZ2bzZ2dm82dnZvNnZ2bzZ2dm7mdnZuZnZ2biZ2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b9Z2dm/GdnZvtnZ2b9Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/GdnZvFnZ2bsZ2dm62dn
        ZvFnZ2b7Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/mdnZvpnZ2bkZ2dmvmdn
        ZqtnZ2atZ2dmw2dnZutnZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b6ZmZl62Zm
        ZbhmZmVnZmZlP2dnZkVnZ2Z3ZmZlz2ZmZf1nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b+Z2dm+mdn
        ZuNmZmW4ZmZleWRkYytbW10EZ2doC2ZmZj1mZmWWZmZl1GdnZvJnZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        ZvpmZmXqZmZluGZmZWZkZGQrY2NiDf//1gBoaGoCZmZmGGZmZUZmZmWGZmZl1GZmZf1nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b+Z2dm6GZmZbpmZmV5ZGRkK0xMUAKCgnwAYWFiAGdnaABkZGUFZWVlFWVlZUdmZmWZZmZl02dn
        ZvBnZ2b+Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2ZmZftmZmXKZmZla2RkZCtjY2INlpaNAG5ubABhYWIAZ2doAGJiZAFkZGUFZWVlHGVl
        ZUdmZmWFZmZl0WZmZfpnZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b4ZmZl5WZmZaNlZWQ2hoaAAGpqaQBlZWQAZWVkAAAAAAAAAAAAZmZlAGZm
        ZQBgYGQCZGRlEWZmZUtmZmWvZmZl62dnZvpnZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZuxnZ2W+Z2dleWZmZCNqamgAZ2dmAGZmZQBmZmUAAAAAAAAA
        AABmZmUAZmZlAGdnZQCNjXEAZmZlL2dnZY9nZ2XRZ2dm8mdnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm7GdnZsBnZ2WNZ2dmVmdnZjpmZmUzZmZlI2Zm
        ZQsAAAAAAAAAAGZmZQtmZmUjZmZlM2dnZjpnZ2ZcZ2dloGdnZtRnZ2byZ2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b5Z2dm6mdnZtpnZ2bJZ2dmuGZm
        ZaFmZmVtZmZlIgAAAAAAAAAAZmZlImZmZW1mZmWgZ2dmuGdnZstnZ2bgZ2dm8WdnZvtnZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b4ZmZl2GZmZZNmZmUtZmZmAGZmZgBmZmUtZmZlk2ZmZdhnZ2b4Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZvZmZmXWZmZlkWZmZSxmZmYAZmZmAGZmZSxmZmWRZmZl1mdnZvZnZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm9GZmZdlmZmWaZmZlPGZmZg9mZmYPZmZlPGZmZZpmZmXZZ2dm9Gdn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b4ZmZl5WZmZbBmZmVeZmZmNGZmZjRmZmVeZmZlsGZm
        ZeVnZ2b4Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZvtmZmXwZmZlzmZmZpZnZ2Z4Z2dmeGZm
        ZpZmZmXOZmZl8GdnZvtnZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/mdnZvpnZ2bwZ2dm3mdn
        ZtVnZ2bVZ2dm3mdnZvBnZ2b6Z2dm/mdnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm+WdnZvZnZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZvxmZmXoZmZl3mdnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b8Z2dm8WdnZuBnZ2bLZ2dmwWdnZsFnZ2bBZ2dmwWdnZsFnZ2bBZ2dmwWdn
        ZsFnZ2bBZ2dmwWdnZsFnZ2bBZ2dmuGZmZaVmZmWbZ2dm/2dnZv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dn
        Zv9nZ2b/Z2dm/2dnZv9nZ2b/Z2dm/2dnZvNnZ2bOZ2dlmmdnZlpnZ2Y+Z2dmPmdnZj5nZ2Y+Z2dmPmdn
        Zj5nZ2Y+Z2dmPmdnZj5nZ2Y+Z2dmPmdnZj5nZ2Y6ZmZlNGZmZTFnZ2biZ2dm5mdnZu5nZ2bzZ2dm82dn
        ZvJnZ2byZ2dm8mdnZvJnZ2bzZ2dm82dnZu5nZ2bjZ2dmxmdnZZJnZ2VXZ2dlF2dnZgBnZ2YAZ2dmAGdn
        ZgBnZ2YAZ2dmAGdnZgBnZ2YAZ2dmAGdnZgBnZ2YAZ2dmAGdnZgBmZmUAZmZlAGZmZqBnZ2atZ2dlxmdn
        ZdRnZ2XUZ2dl02dnZdNnZ2XTZ2dl02dnZdRnZ2XUZ2dlxWdnZaVnZ2V5Z2dlQGdnZRtnZ2QGZ2dmAGdn
        ZgBnZ2YAZ2dmAGdnZgBnZ2YAZ2dmAGdnZgBnZ2YAZ2dmAGdnZgBnZ2YAZ2dmAGZmZQBmZmUAZmZmW2Zm
        ZmhnZ2WBZ2dljmdnZY5nZ2WNZ2dljWdnZY1nZ2WNZ2dljmdnZY9nZ2WAZ2dlYWdnZTpnZ2UPZ2dlAGdn
        ZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABmZmYcZmZmIGdnZShnZ2UsZ2dlLGdnZSxnZ2UsZ2dlLGdnZSxnZ2UsZ2dlLWdnZShnZ2UeZ2dlEWdn
        ZQRnZ2UAZ2dlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAGZmZgBmZmYAZ2dlAGdnZQBnZ2UAZ2dlAGdnZQBnZ2UAZ2dlAGdnZQBnZ2UAZ2dlAGdn
        ZQBnZ2UAZ2dlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB
        AAAAA4AAAAeAAAAf4AAAH/gAAAGAAAABgAAAAYAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAB//wAAf/8AAf//AAH///////8=
</value>
  </data>
</root>